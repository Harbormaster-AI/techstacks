##----------------------------------------------
## Azure_Pipeline_Pool_Declaration
##----------------------------------------------
#macro( Azure_Pipeline_Pool_Declaration )
pool:
  vmImage: 'ubuntu-16.04'
#end##macro( Azure_Pipeline_Pool_Declaration )

##----------------------------------------------
## Azure_Pipeline_Var_Declarations
##----------------------------------------------
#macro( Azure_Pipeline_Var_Declarations )
#end##macro( Azure_Pipeline_Var_Declarations )

##----------------------------------------------
## Azure_Pipeline_Var_Declarations
##----------------------------------------------
#macro( Azure_Pipeline_Docker_Steps )
#set( $dockerOrgName = ${aib.getParam("docker.orgName")} )
#set( $dockerRepo = ${aib.getParam("docker.repo")} )
#set( $dockerTag = ${aib.getParam("docker.tag")} )
#set( $dockerHost = ${aib.getParam("docker.host")} )
#set( $dockerImageName = "${dockerOrgName}/${dockerRepo}" )
- task: Docker@2
  displayName: Build Docker image
  inputs:
    repository: ${dockerImageName}
    command: build
    Dockerfile: ./Dockerfile
- task: Docker@2
  displayName: Push Docker image
  inputs:
    containerRegistry: |
      $(dockerHost)
    repository: $(imageName)
    command: push
    tags: |
      $dockerTag    
#end##macro( Azure_Pipeline_Var_Declarations )

##----------------------------------------------
## Azure_Pipeline_Steps
##----------------------------------------------
#macro( Azure_Pipeline_Steps )
#instantiateCommandArrays()
#initializeGlobalCICDInitializationCommands()
steps:
- script: echo initializing...
  displayName: 'Initializing...'
#foreach( $command in $globalCICDInitialzationCommands )
- script: $command
#end##foreach( $command in $globalCICDInitialzationMaps.keySet() )
#initializeGlobalCICDBuildCommands()
- script: echo building...
#foreach( $command in $globalCICDBuildCommands )
- script: $command
#end##foreach( $key in $globalCICDInitialzationMaps.keySet() )
#if ( $aib.getParam( "kubernetes.inUse" ) == "true" )
-script: cd terraform && chmod 777 terraform.sh && ./terraform.sh install
#end##if ( $aib.getParam( "kubernetes.inUse" ) == "true" )      
#end##macro( AWS_CodeBuild_Install_Phase_Commands )


