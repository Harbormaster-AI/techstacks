####################################################################
## declare required imports
####################################################################
#macro( declareImports )
#set( $classes = $aib.getClassesToGenerate() )
#set( $includePrimaryKeys = false )
#set( $includeTypes = true )
#set( $includeAssociations = false )
#set( $delim = "" )
#set( $suffix = "" )
#foreach( $class in $classes )
#set( $types = $class.getAttributesAsString( $includePrimaryKeys, $includeTypes, $includeAssociations, $delim, $suffix ) )
#isTypeTime( $types )
#break    
#end##foreach( $class in $classes )  
#end##macro( declareImports )

####################################################################
## declare a const for each enum declared in the model
####################################################################
#macro( declareEnums )
#foreach ( $enum in $aib.getEnumClassesToGenerate() )
#set( $enumName = $enum.getName() )

//==============================================================  
// $enumName Declaration
//==============================================================
type $enumName int
const (
#set( $attributes = $enum.getAttributes() )
#foreach ( $attribute in $attributes )
#if ( $velocityCount == 1 )
    ${attribute.getName()} $enumName = iota
#else
	${attribute.getName()}
#end##if ( $velocityCount == 1 )
#end##foreach ( $attribute in $attributes )
)

#end##foreach ( $enum in $aib.getEnumClassesToGenerate() )
#end##macro( declareEnums )

####################################################################
## declare for each struct per model entity
####################################################################
#macro( declareStructs $class )
#set( $className = $class.getName() )
//==============================================================
// $className Declaration
//==============================================================	
type $className struct {
    gorm.Model
#declareStructFields( $class )
}

#end##macro( declareStructs )

####################################################################
## declare fields for a given entity
####################################################################
#macro( declareStructFields $class )
#set( $includePrimaryKeys = false ) ##Go ORM model handles defining an Id field
#set( $attributes = ${class.getAttributesOrderedInHierarchy( $includePrimaryKeys )} )
#foreach( $attribute in $attributes )
#if ( $attribute.isFromAssociation() == false )
#set( $attributeName = "${Utils.capitalizeFirstLetter(${attribute.getName()})}" )
#else
## use the role name
#set( $attributeName = "${Utils.capitalizeFirstLetter(${attribute.getAssociation().getRoleName()})}" )
#end##if ( $attribute.isFromAssociation() == false )
    $attributeName            #mapToGoType( $attribute )
#end##foreach( $attribute in $attributes )
######################################################################
## need to output a foreign key for each association this class is a sibling of
######################################################################
#set( $classes = $aib.getClassesToGenerate() )
#foreach( $loopClass in $classes )
#foreach( $association in $loopClass.getAssociations() )
#if( $association.getType().lastIndexOf( $class.getName() ) > -1 )
    ${loopClass.getName()}Id    uint
#end##if( $association.getClassObject().getName().equalsIgnoreCase( $class.getName() ) )
#end##foreach( $association in $class.getAssociations())
#end##foreach( $class in $classes )
#end##macro( declareStructs $className )

####################################################################
## maps an attibute model type to a Golang type
####################################################################
#macro( mapToGoType $attribute )
#set( $name = $attribute.getName() )
#set( $type = $attribute.getType() )
######################################################################
## handle associations and non-associations differently
######################################################################
#if ( $attribute.isFromAssociation() == false )
######################################################################
## handle enums and non-enums differently
######################################################################
#if ( $attribute.isFromEnumerator() == false )
#if( $type.contains("tring") )
#set( $type = "string" )
#elseif( $type.contains("loat") )
#set( $type = "float32" )
#elseif( $type.contains("oolean") )
#set( $type = "bool" )
#elseif( $type.equalsIgnoreCase("char") )
#set( $type = "byte" )
#elseif( $type.equalsIgnoreCase("int") || $type.contains("nteger") )
#set( $type = "int32" )
#elseif( $type.contains("ouble") )
#set( $type = "int64" )
#elseif( $type.contains("hort") )
#set( $type = "int16" )
#else
#set( $isTimeType = "#isTypeTime( $type )" )
#if ( $isTimeType.length() > 0 )
#set( $type = "time.Time" )
#else
#set( $type = "string" )
#end##if ( $isTimeType.length() > 0 )
#end
#else ## attribute is an enumeration
#set( $type = $type ) ## no_op
#end##if ( $attribute.isFromEnumerator() == false )
${type}
#else## attribute is from an association
######################################################################
## handle attribute as a single association
######################################################################
#if ( $attribute.isFromSingleValueAssociation() == true )
#set( $type = $type )
######################################################################
## handle attribute as a multiple association
######################################################################
#else ## attribute is from a multiple assoication
#set( $type = "[]${attribute.getAssociation().getType()}" )
#end##if ( $attribution.isFromSingleValueAssociation() == true )
${type}
#end##if ( $attribute.isFromAssociation() == false )
#end##macro( mapToGoType $attribute )

####################################################################
## outputs all class attributes to a default value
####################################################################
#macro ( defaultTestStructOutput $class )
#set( $defaults = "{" )
#set( $attributes = $class.getAttributesOnly(false, false) )
#set( $attributesSize = $attributes.size() )
#foreach( $attribute in $attributes )
#set( $type = $attribute.getType() )
#set( $attributeName = "${Utils.capitalizeFirstLetter( $attribute.getAsArgument() )}" )
#set( $defaultValue = "${esc.quote}test value${esc.quote}" )
#if ( $attribute.isFromEnumerator() == false )
#if( $type.contains("tring") )
#set( $defaultValue = "${esc.quote}test value for ${attributeName}${esc.quote}" )
#elseif( $type.contains("loat") )
#set( $defaultValue = "1000" )
#elseif( $type.contains("oolean") )
#set( $defaultValue = "true" )
#elseif( $type.equalsIgnoreCase("char") )
#set( $defaultValue = "A" )
#elseif( $type.equalsIgnoreCase("int") || $type.contains( "nteger") )
#set( $defaultValue = "100" )
#elseif( $type.contains("ouble") )
#set( $defaultValue = "10" )
#elseif( $type.contains("hort") )
#set( $defaultValue = "1" )
#else
#set( $isTypeTime = "#isTypeTime( $type )" )
#if( $isTypeTime.length() > 0 )
#set( $defaultValue = "time.Now()" )
#else
#set( $type = "${esc.quote}test value${esc.quote}" )
#end##if( $type.equalsIgnoreCase("string") )
#end
#else ## attribute is an enumeration
#set( $defaultValue = "0" )
#end##if ( $attribute.isFromEnumerator() == false )
#set( $defaults = "${defaults}${attributeName}:${defaultValue}" )
#if( $velocityCount < $attributesSize )
#set( $defaults = "${defaults},") 
#end##if ( $velocityCount < $attributesSize )
#end## foreach $attribute in $attributes
$defaults}
#end##macro ( defaultTestStructutput )

#macro ( isTypeTime $type )
#if ( $type.contains("time") || $type.contains("Time") || $type.contains("Date") || $type.contains("java.util.Date") || $type.contains("java.sql.Date") )
    "time"
#end##if ( $types.contains("time") || $types.contains("Time") || $types.contains("Date") )
#end##macro( isTimeType )