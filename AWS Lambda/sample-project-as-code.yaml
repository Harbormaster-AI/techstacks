#
# Standard DevOps project creation options.  
#
# Pay close attention to parameters that require values unique  
# to you, such as those for Git, Docker, and AWS.
#
# To use Git, Docker, and any provider, be sure to have created
# an account with each.  
#
# For Git, before generating the project be sure to create the 
# repository and designate as public before
#
# Minimally, anywhere you see an xxx, replace with your relevant value
#

project:
    name: AWS Lambda MySQL Demo
    description: Sample AWS Lambda Serverless using MySQL project
    techstack:
       name:                Lambda      
                                      # To see the list of available tech stacks on a Harbormaster instance using command:
                                      #     harbormaster_cli stack_list --output pretty

    model:
        name:             ./samples/models/company-model.yaml
                          # options:     Unique name of an existing model, a URL to a model file or Git repo, 
                          #                or full/relative path to a model file.
                          #
                          # To see the list of supported model types use command:
                          #      harbormaster_cli model_types_supported
                          #                          
                          # To see the list of available models on a Harbormaster instance use command:
                          #      harbormaster_cli model_list --output pretty
                          # 
                          # For JAR files and Git Repos with Java Files, include the root package names of the root package
#        javaRootPackageNames:
#          - com.freeport.bo    
#        primaryKeyPattern: _pojoName_Id # the pattern to look for when interrogating a POJO for a primary key field
                              # allowed values are a either a literal, ex: id OR 
                              # POJOName with a suffix, ex: _pojoName_Id will handle accountId, customerId, etc...                 

#
# DevOps Project Creation Options
#    	
    options:

#            
# Application parameters
#            
    
        application:
            name:                  lambdademo
            description:           Demo AWS Lambda RDBS application with a remote Spark RESTful API generated by Harbormaster
            author:                Dev Team
            email:                 xxxx.xxxxxxxxx@xxxxxxxx.com
            application logo URL:  ./img/turnstone.biologics.png
            company name:          Turnstone Biologics
            version:               0.0.1
            
                         
#            
# CI/CD parameters
#            
        cicd:
            platform:  codeship    # options:  codeship, circleci, jfrog.pipelines
                                   #           jenkins, azure, aws, gitlab, 
                                   #           bitbucket, github
            AES key:   xxxxx       # this is assigned per CodeShip project
            

#
# Git repository parameters
#
        git:            
            name:        git_test_Lambda    # an arbitrary name, but for JFrog, this should be the name of the Git related integration
            username:    xxxxxxxxxxxxx
            password:    xxxxxxxxxxxxx
            repository:  xxxxxxxxxxxxx
            tag:         latest
            host:        bitbucket.org            

#
# HashiCorp Terraform parameters
#
# If in use, will build and deploy a generated data access layer using Spark Micro Java framework with Hibernate ORM
# deployed on the cloud provider of choice.  Each serverless function will delegate db read/writes to this data layer.
# This ensures fast start and execution for each function while remaining stateless.
# If Kubernetes is in use, will deploy the data access layer as to a cluster.
#
        terraform:
            inUse:             true	
            provider:          aws        # options: aws, google, azure, nutanix
            region:            us-east-1  # options: any cloud provider region
            ssh-fingerprint:   xxxxxx     # CircleCI requires this for SSH
            
            
#
# AWS and Lambda parameters
#
 #
# AWS and Lambda parameters
#
        aws-lambda:
            key-pair-name:     xxxxxxxxxxx
            access-key:        ASSIGN__ON_CICD_PLATFORM_AS_ENV_VARS
            secret-key:        ASSIGN__ON_CICD_PLATFORM_AS_ENV_VARS
            s3Bucket:          mys3bucket
            region:            us-east-1
            runtime:           java8				# options: java8,nodejs6.10,nodejs8.10
            useKinesis:        false
            kinesisStreamName: xxxxxxxxxx			# use with caution since billing charge will incur
            lambdaRoleArn:     xxxxxxxxxx           # ex: arn:aws:iam::xxxxxxxxxxx:role/service-role/myRoleName
            timeout:           30
            memorySize:        512
            forceUpdate:       true
            publish:           true
            vpcSubnetIds:
            vpcSecurityGroupIds: 
            delegateDAOHost:
            delegateDAOPort:
            
#
# Kubernetes parameters: If not in use, and Terraform
#                        is in use, physical infrastructure
#                        will be provisioned on the provider
#
        kubernetes:
            inUse:              false
            host:               https://xxx.xxx.xxx.xxx
            project:            xxxxxxxxxxxxxxxxx
            region:             us-central1-a     # options: any provider region
            hostTarget:         google            # option: google, aws, azure, nutanix
            username:           xxxxxxxxxxx
            password:           xxxxxxxxxxx       # value to assign
            exposeAsService:    true
            serviceType:        LoadBalancer      # options: LoadBalancer, NodePort, ClusterIP
            useSessionAffinity: true

            
#            
# Artifact repository for build dependencies and binaries            
#
        artifact-repo:
            inUse:              false
            type:               jfrog                  # options: nexus, jfrog
            userName:           xxxxxxxx
            password:           xxxxxxxx
            email:              xxxx.xxxxxx@xxxxxxx.com
            repoUrl:            http://xxx.xxx.xxx.xxx:8081/repository/npm-public

#            
# Swagger parameters - see https://swagger.io/docs/specification/2-0/basic-structure/ for valid options   
#
            
        swagger:
            host:              
            basepath:           /
            contactName:        Harbormaster Dev
            contactEmail:       dev@harbormaster.ai
            contactUrl:
            licenseUrl:         http://www.apache.org/licenses/LICENSE-2.0.html
            licenseName:        Apache 2.0
            title:              Lambda Functions Swagger
            version:            v1.0
            description:        Swagger file for Lambda Functions
            termsOfService:
            outputFormats:      json

#            
# Hibernate ORM parameters            
#

        hibernate:
            hibernate.connection.driver.class:    com.mysql.jdbc.Driver
            hibernate.connection.username:        xxxx
            hibernate.connection.password:        xxxx
            hibernate.dialect:                    org.hibernate.dialect.MySQL8Dialect
            hibernate.max.fetch.depth:            1
            hibernate.connection.url:             jdbc:mysql://localhost:3306/lambdademo?createDatabaseIfNotExist\u003dtrue #do no remove the createDatabaseIfNotExist\u003dtrue 

