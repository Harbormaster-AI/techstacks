#macro( determineKotlinType $attribute )
#set( $name = $attribute.getName() )
#set( $type = $attribute.getType() )
#set( $defaultValue = "${esq.quote}${esq.quote}" )
######################################################################
## handle associations and non-associations differently
######################################################################
#if ( $attribute.isFromAssociation() == false )
######################################################################
## handle enums and non-enums differently
######################################################################
#if ( $attribute.isFromEnumerator() == true )
#set( $type = $type )
#set( $defaultValue = "$type.values().get(0)" )
#else
#if( $type.contains("tring") )
#set( $type = "String" )
#set( $defaultValue = "" )
#elseif( $type.contains("loat") )
#set( $type = "Float" )
#set( $defaultValue = "0.0F" )
#elseif( $type.contains("oolean") )
#set( $type = "Boolean" )
#set( $defaultValue = "true" )
#elseif( $type.equalsIgnoreCase("char") )
#set( $type = "Char" )
#set( $defaultValue = "" )
#elseif( $type.equalsIgnoreCase("long") )
#set( $type = "Long" )
#set( $defaultValue = "0L" )
#elseif( $type.equalsIgnoreCase("int") || $type.contains("nteger") )
#set( $type = "Int" )
#set( $defaultValue = 0 )
#elseif( $type.contains("ouble") )
#set( $type = "Double" )
#set( $defaultValue = "0.0D" )
#elseif( $type.contains("hort") )
#set( $type = "Short" )
#set( $defaultValue = 0 )
#elseif( $type.contains("yte") )
#set( $type = "Byte" )
#set( $defaultValue = 0 )
#else ## testing for date/time
#set( $isTimeType = "#isTypeTime( $type )" )
#if ( $isTimeType.length() > 0 )
#set( $type = "Date" )
#set( $defaultValue = "Date()" )
#else
#set( $type = "String" )
#set( $defaultValue = "${esq.quote}${esq.quote}" )
#end##if ( $isTimeType.length() > 0 )
#end### testing for date/time
#end##if ( $attribute.isFromEnumerator() == true )
#else## attribute is from an association
######################################################################
## handle attribute as a single association
######################################################################
#if ( $attribute.isFromSingleValueAssociation() == true )
#if ( $aib.isValueObject( ${attribute.getAssociation().getType()} ) == true )
#set( $type = "${type}" )
#set( $defaultValue = "${type}()" )
#else
#set( $type = "${type}Entity" )
#set( $defaultValue = "${type}Entity()" )
#end##if ( $aib.isValueObject( ${attribute.getAssociation().getType()} == true )
######################################################################
## handle attribute as a multiple association
######################################################################
#else ## attribute is from a multiple assoication
#set( $type = "List<${attribute.getAssociation().getType()}Entity>" )
#set( $defaultValue = "kotlin.collections.emptyList()" )
#end##if ( $attribution.isFromSingleValueAssociation() == true )
#end##if ( $attribute.isFromAssociation() == false )
${type}? = null#end##macro( determineKotlinType inputType )

#macro( outputKotlinArgDeclarations $class $includeAssociations $includeId $forAggregate $forEntity )
#set( $className = ${class.getName()} )
#set( $lowercaseClassName = ${Utils.lowercaseFirstLetter( ${className} )} )
#set( $pk = "${lowercaseClassName}Id" )
#set( $targetIdentifier = "" )
#set( $var = "var" )
#set( $includePKs = false )
#if ( $forAggregate == true )
#set( $targetIdentifier = "@TargetAggregateIdentifier " )
#end##if ( $forAggregate == true )
#set( $attributes = ${class.getAttributesOrderedInHierarchy( $includePKs )} )
#if ( $attributes.size() > 0 )
#if ( $includeId == true )
#if ( $forAggregate == false )
#set( $targetIdentifier = "@Id " )
#end##if ( $forAggregate == true )
    ${targetIdentifier}var ${pk}: UUID? = null,
#end##if ( $includeId == true )
#foreach( $attribute in $attributes )
#set( $isValueObject = $aib.isValueObject( $attribute.getType() ) )
#set( $isFromEnumeator = $attribute.isFromEnumerator() )
#set( $isFromAssociation = $attribute.isFromAssociation() )
## allowed types (enum, varueobjects, non-associations, and conditionally associations )
#if( $isFromEnumeator == true || $isValueObject == true || $isFromAssociation == false || $includeAssociations == true ) 
#set( $jpa-annotation = "" )
#if ( $attribute.isFromEnumerator() == true )
#set( $var = "@Enumerated(EnumType.STRING) var")
#elseif ( $isValueObject == true )
#set( $attributeNodes = "#declareAttributeNodes( $attribute )" )
#if( $forEntity == true )
#set( $jpa-annotation = "@Embedded " )
#end
#set( $var = "${jpa-annotation}${attributeNodes}    var")
#elseif ( $attribute.isFromSingleValueAssociation() == true )
#if( $forEntity == true )
#set( $jpa-annotation = "@OneToOne @JoinColumn(name = ${esc.quote}${id}${esc.quote}, referencedColumnName = ${esc.quote}${id}${esc.quote}) " )
#end
#set( $id = "${Utils.lowercaseFirstLetter( $attribute.getType() )}Id" )
#set( $var = "${jpa-annotation}var")
#elseif ( $attribute.isFromMultiValueAssociation() == true )
#if( $forEntity == true )
#set( $jpa-annotation = "@ElementCollection " )
#end
#set( $var = "${jpa-annotation}var")
#end##if ( $attribute.isFromEnumerator() == true )
#set( $kotlinType = "#determineKotlinType( ${attribute} )" )
#set( $comma = "," )
#if ( $velocityCount == $attributes.size() )
#set( $comma = "" )
#end##if ( $velocityCount < $attributes.size() )
#set( $lowercaseName = ${Utils.lowercaseFirstLetter( ${attribute.getName()} )} )
    ${var} ${lowercaseName}: ${kotlinType}${comma}
#end##if( $isFromEnumerator == true || $valueObject == true || $isFromAssociation == false || $includeAssociations == true ) 
#end##foreach( $attribute in $attributes )
#else
#if ( $includeId == true )
    ${targetIdentifier} var ${pk}: UUID? = null
#end##if ( $includeId == true )
#end##if ( $attributes.size() > 0 )
#end##macro( outputKotlinArgDeclarations $class $includeAssociations $includeId $forAggregate )

#macro ( isTypeTime $type )
#if ( $type.contains("time") || $type.contains("Time") || $type.contains("Date") || $type.contains("date") )
    "Instant"
#end##if ( $types.contains("time") || $types.contains("Time") || $types.contains("Date") )
#end##macro( isTimeType )

#macro( declareAttributeNodes $attributeAsValueObject )
#set( $valueObject = $aib.getValueObject( $attributeAsValueObject.getName() ) )
#set( $valueObjectName = $Utils.lowercaseFirstLetter( ${attributeAsValueObject.getName()} ) )
#set( $includePKs = false )
#set( $attributes = $valueObject.getAttributesOrderedInHierarchy( $includePKs ) )
    @AttributeOverrides(
#foreach( $attribute in $attributes )
#set( $output = "AttributeOverride( name = ${esc.quote}${attribute.getName()}${esc.quote}, column = Column(name = ${esc.quote}${valueObjectName}_${attribute.getName()}${esc.quote}))" )
#if ( $velocityCount < $attributes.size() )
#set( $output = "${output}," )
#end##if ( $velocityCount < $attributes.size() )
      ${output}
#end##foreach( $attribute in $attributes )
    )
#end##macro( declareAttributeNodes $attribute )