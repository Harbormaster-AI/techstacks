#set( $appName = $aib.getApplicationNameFormatted() )
#set( $entity-store-type = $aib.getParam( "axon-framework.entity-store-type") )
#set( $event-store-type = $aib.getParam( "axon-framework.event-store-type") )
# The name of this app:
spring.application.name=${appName}
server.port=${aib.getParam("axon-framework.server-port")}

# Debugging on
logging.level.io.axoniq.demo=debug

# The default profiles are "all of them"
spring.profiles.active=${aib.getParam("axon-framework.spring-profiles-active")}

# Database specifics
#if ( $entity-store-type != "mongodb" )
#if ( $entity-store-type == "h2" )
#set( $hibernate-dialect = "org.hibernate.dialect.H2Dialect" )
#set( $driver-class-name = "org.h2.Driver" )
#elseif ( $entity-store-type == "mysql" )
#set( $hibernate-dialect = "org.hibernate.dialect.MySQL8Dialect" )
#set( $driver-class-name = "com.mysql.jdbc.Driver")
#elseif ( $entity-store-type == "postgres" )
#set( $hibernate-dialect = "org.hibernate.dialect.ProgressDialect" )
#set( $driver-class-name = "org.postgresql.Driver")
#end##if ( $entity-store-type != "mongodb" )
spring.jpa.hibernate.dialect=${hibernate-dialect}
spring.datasource.url=${aib.getParam("axon-framework.entity-store-url")}
spring.jpa.hibernate.ddl-auto=update
spring.datasource.driver-class-name=${driver-class-name}
spring.datasource.username=${aib.getParam("axon-framework.database-username")}
spring.datasource.password=${aib.getParam("axon-framework.database-password")}
spring.jpq.show-sql=true
spring.jpa.properties.hibernate.id.new_generator_mappings=false
#end##if ( $entity-store-type != "mongodb" )

database.name=${aib.getParam("axon-framework.database-name")}

# Management endpoints inclusion
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=*

axon.axonserver.enabled=${aib.getParam("axon-framework.use-axon-server")}
axon.axonserver.servers=${aib.getParam("axon-framework.axonserver-servers")}

# whether to fall back to http when no meta-data is available
axon.distributed.spring-cloud.fallback-to-http-get=true
# the URL on which to publish local data and retrieve from other nodes.
axon.distributed.spring-cloud.fallback-url=/message-routing-information

#snap shot thresholds are applied per class using the default value
#foreach( $aggregate in $aib.getClassesToGenerate() )
#set( $aggregateName = ${Utils.lowercaseFirstLetter( ${aggregate.getName()} )} )
#set( $aggregateSnapshotThreshold = $aib.getParam("axon-framework.default-snapshot-threshold" ) )
axon.aggregate.${aggregateName}.snapshot-threshold=${aggregateSnapshotThreshold}
#end##foreach( $aggregate = $aib.getClassesToGenerate() )

#snap shot thresholds are applied per aggregate using the custom defined value
#foreach( $aggregate in $aib.getAggregatesToGenerate() )
#set( $aggregateName = $aggregate.getName() )
#set( $aggregateThreshold = $aggregate.getSnapshotThreshold() )
axon.aggregate.${aggregateName}.snapshot-threshold=${aggregateSnapshotThreshold}
#end##foreach( $aggregate = $aib.getAggregatesToGenerate() )

# this configuration is recommended by AxonIQ, assign to message then general and events will use that value
#axon.serializer.messages=xstream
#axon.serializer.general=java
axon.serializer.events=jackson

# mongodb parameters
#if ( ${aib.getParam("axon-framework.entity-store-type")} == "mongodb" )
#set( $url = ${aib.getParam("axon-framework.entity-store-url")} )
#else
#set( $url = ${aib.getParam("axon-framework.event-store-url")} )
#end##if ( ${aib.getParam("axon-framework.entity-store-type")} == "mongodb" )
mongodb.connection.url=${url}
spring.data.mongodb.uuid-representation=standard
mongodb.sagas.collection.name=${aib.getParam("axon-framework.sagas-collection-name")}
mongodb.snapshot.events.collection.name=${aib.getParam("axon-framework.snapshot-events-collection-name")}
mongodb.domain.events.collection.name=${aib.getParam("axon-framework.domain-events-collection-name")}


