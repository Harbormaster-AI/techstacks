## ----------------------------------------
## Rails DB migration fields
## ----------------------------------------
#macro( migrationFields $class )
#set( $includePrimaryKeys = false )
## ----------------------------------------
## loop thru all attributes, excluding pks
## ----------------------------------------
#foreach ( $attribute in $class.getAttributesOrderedInHierarchy( $includePrimaryKeys ) )  
#set( $name = $attribute.getName() )
#set( $title = $name )
## ----------------------------------------
## if not from an association
## ----------------------------------------				
#if ( $attribute.isFromAssociation() == false )			
## ----------------------------------------
## handle enumerated type as an integer in the db
## ----------------------------------------				
#if ( $attribute.isFromEnumerator() == true )
#set( $dbType = "t.integer" )
#else##if ( $attribute.isFromEnumerator() == true )
#set( $type = $attribute.getType() )
## ----------------------------------------
## handle boolean
## ----------------------------------------
#if ( $type.endsWith( "oolean") == true )
#set( $dbType = "t.boolean" )
## ----------------------------------------
## handle date 
## ----------------------------------------				
#else
#set( $isRequired = $attribute.isRequired() )
#set( $controlsRequired = false )
#if ( $type.endsWith( "Date" ) )
#set( $dbType = "t.date" )
## ----------------------------------------
## handle time 
## ----------------------------------------
#elseif ( $type.endsWith( "Time" ) )
#set( $dbType = "t.datetime" )
## ----------------------------------------
## handle whole numbers 
## ----------------------------------------
#elseif ( $type.endsWith( "hort" ) || $type.endsWith( "nteger" ) || $type.endsWith( "ong" ) || $type.endsWith( "int" ) )
#set( $dbType = "t.integer" )
## ----------------------------------------
## handle floats
## ----------------------------------------
#elseif ( $type.endsWith( "loat" ) )
#set( $dbType = "t.float" )
## ----------------------------------------
## handle decimal
## ----------------------------------------
#elseif ( $type.endsWith( "ecimal" ) )
#set( $dbType = "t.decimal" )
## ----------------------------------------
## handle all by default as input text
## ----------------------------------------
#else
#set( $dbType = "t.string" )
#end## of all none-boolean values
#end##if ( $type.endsWith( "Date" )
#end##if ( $attribute.isFromEnumerator() == false )
      ${dbType} :${name}      
#end##if ( $attribute.isFromAssociation() == false )
#end##foreach ( $attribute in $class.getAttributesOrderedInHierarchy( $includePrimaryKeys ) )
##handleAssociationsForMigration($class)
#end##macro( migrationFields $class )


## ----------------------------------------
## handle association declarations 
## ----------------------------------------
#macro( handleAssociationsForMigration $class )
## ----------------------------------------
## handle single associations
## ----------------------------------------
#foreach( $association in $class.getSingleAssociations() )
      t.references :${association.getRoleName()}, foreign_key: true
#end##foreach( $association in $class.getSingleAssociations() )
## ----------------------------------------
## handle multiple associations
## ----------------------------------------
#foreach( $multi in $aib.getNavigableMultiAssociations( $class ) )
#if( $multi.isBidirectional() == false )
#set( $lowercaseClassName = ${Utils.lowercaseFirstLetter(${multi.getClassObject().getName()})} )
      t.belongs_to :${lowercaseClassName}
#end
#end##foreach( $multi in $aib.getNavigableMultiAssociations( $class ) )
#end##macro( handleAssociationsForMigration $class )

## ----------------------------------------
## create join tables for 
## See https://guides.rubyonrails.org/association_basics.html#creating-join-tables-for-has-and-belongs-to-many-associations
## ----------------------------------------
#macro( createJoinTables )
#set($joinNames = ["foobar"])
#foreach( $class in $aib.getClassesToGenerate() )
#foreach( $multiAssociation in $aib.getNavigableMultiAssocations( ${class} ) )
#set( $siblingAssociation = $multiAssociation.getSiblingAssociationEndObject() )
#set( $roleNameA = $multiAssociation.getRoleName() )
#set( $roleNameB = $siblingAssociation.getRoleName() )
#set( $joinName = "${roleNameB}_${roleNameA}" )
##if ( $joinNames.contains( $joinName ) == false )## make sure we don't add the join twice
#set( $joinName = "${roleNameA}_${roleNameB}" )
##set($emptyCall = $joinNames.add(${joinName}))## add it and eat the output which is a true/false
    create_join_table :$roleNameA, :$roleNameB do |t|
      t.index :${multiAssociation.getType()}_id
      t.index :${siblingAssociation.getType()}_id
    end
  end
##end##if ( $joinNames.contains( $joinName ) == false }
#end##foreach( $multiAssociation in $class.getNavigableMultiAssocations() )  
#end##foreach( $class in $aib.getClassesToGenerate() )
#end##macro( createJoinTables )
