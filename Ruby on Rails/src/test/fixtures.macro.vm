#macro ( outputFixtureDeclaration $class )
#set( $attributes = $class.getAttributesOnly(false, false) )
#set( $attributesSize = $attributes.size() )
#foreach( $attribute in $attributes )
#if ( $attribute.isFromEnumerator() == true )
#set( $attributeName = ${attribute.getName()} )
#set( $defaultValue = "0" )
#else
#set( $type = $attribute.getType() )
#set( $attributeName = "${Utils.lowercaseFirstLetter( $attribute.getAsArgument() )}" )
#set( $isTypeTime = "#isTypeTime( $type )" )
#if( $isTypeTime.length() > 0 )
#set( $defaultValue = "2020-10-15" )
#else
#if( $type.contains("tring") )
#set( $defaultValue = "test string for ${attributeName}" )
#elseif( $type.contains("loat") )
#set( $defaultValue = "1000" )
#elseif( $type.contains("oolean") )
#set( $defaultValue = "true" )
#elseif( $type.equalsIgnoreCase("char") )
#set( $defaultValue = "A" )
#elseif( $type.equalsIgnoreCase("int") || $type.contains( "nteger") )
#set( $defaultValue = "100" )
#elseif( $type.contains("ouble") )
#set( $defaultValue = "10" )
#elseif( $type.contains("hort") )
#set( $defaultValue = "1" )
#else## assume it is a string
#set( $defaultValue = "${esc.quote}test value${esc.quote}" )
#end##if( $type.contains("tring") )
#end##if( $isTypeTime.length() > 0 )
#end##if ( $attribute.isFromEnumerator() == false )## ignore enums
  ${attributeName}: ${defaultValue}
#end##foreach( $attribute in $attributes )
#end##macro ( outputSeedDeclaration $class )

#macro ( isTypeTime $type )
#if ( $type.contains("time") || $type.contains("Time") || $type.contains("Date")  )
    "true"
#end##if ( $types.contains("time") || $types.contains("Time") || $types.contains("Date") )
#end##macro( isTimeType )