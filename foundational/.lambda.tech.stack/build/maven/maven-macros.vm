##################################################################################
## awsLambdaFunctionDecls - driven by the aws-lambda.crudDeclStrategy
##################################################################################
#macro( awsLambdaFunctionDecls )
#if( ${aib.getParam("aws-lambda.crudDeclStrategy")} == "methodsPerClass" )
#set( $size = $aib.getClassesWithIdentity().size() )			
#foreach( $class in $aib.getClassesWithIdentity() )
#set( $loopCount = $velocityCount )		
#set( $className = $class.getName() )
#set( $includeComposites = false )
##handle single associations
#foreach( $singleAssociation in $class.getSingleAssociations( ${includeComposites} ) )
#set( $roleName = $singleAssociation.getRoleName() )
#set( $parentName  = $class.getName() )
#awsLambdaFuncDecl( ${class.getName()} "get${roleName}"  "get${className}${roleName}" "get the ${roleName} for ${className}", "," )
#awsLambdaFuncDecl( ${class.getName()} "save${roleName}"  "save${className}${roleName}" "save the ${roleName} for ${className}", "," )
#awsLambdaFuncDecl( ${class.getName()} "delete${roleName}"  "delete${className}${roleName}" "delete the ${roleName} for ${className}", "," )
#end ##foreach( $singleAssociation in $class.getSingleAssociations( ${includeComposites} ) )
##handle multiple associations
#foreach( $multiAssociation in $class.getMultipleAssociations() )
#set( $roleName = $multiAssociation.getRoleName() )
#set( $childName = $multiAssociation.getType() )
#set( $parentName  = $class.getName() )
#awsLambdaFuncDecl( ${class.getName()} "get${roleName}"  "get${className}${roleName}" "get the ${roleName} for ${className}", "," )
#awsLambdaFuncDecl( ${class.getName()} "add${roleName}"  "add${className}${roleName}" "add a ${childName} to the ${roleName} for ${className}", "," )
#awsLambdaFuncDecl( ${class.getName()} "assign${roleName}"  "assign${className}${roleName}" "assign one or more ${childName} to the ${roleName} for ${className}", "," )
#awsLambdaFuncDecl( ${class.getName()} "delete${roleName}"  "delete${className}${roleName}" "delete a ${childName} from the ${roleName} for ${className}", "," )
#end ##foreach( $multiAssociation in $classObject.getMultipleAssociations() )
##common CRUD + getAll functions
#awsLambdaFuncDecl( ${class.getName()} "create${className}" "create${className}" "creates a $className using supplied $className data", "," )
#awsLambdaFuncDecl( ${class.getName()} "get${className}" "get${className}" "find $className by its primary key", "," )
#awsLambdaFuncDecl( ${class.getName()} "getAll${className}" "getAll${className}" "find all $className entities", "," )
#awsLambdaFuncDecl( ${class.getName()} "save${className}" "save${className}" "saves a $className using supplied $className data", "," )
#if( $loopCount < $size )
#awsLambdaFuncDecl( ${class.getName()} "delete${className}" "delete${className}"  "delete a $className by its primary key", "," )
#else
#awsLambdaFuncDecl( ${class.getName()} "delete${className}" "delete${className}"  "delete a $className by its primary key", "" )
#end ##if( $loopCount < $size )
#end ##foreach( $class in $aib.getClassesWithIdentity() )
#elseif( ${aib.getParam("aws-lambda.crudDeclStrategy")} == "uberMethodPerClass" )
#foreach( $class in $aib.getClassesWithIdentity() )
#awsLambdaFuncDecl( ${class.getName()} "execute" "execute"  "Uber method to serve as a single entry point for ${class.getName()} CRUD exection", "" )
#end##foreach( $class in $aib.getClassesWithIdentity() )
#elseif( ${aib.getParam("aws-lambda.crudDeclStrategy")} == "uberMethod" )
#awsLambdaFuncDecl( "Uber" "execute" "execute"  "Uber method to serve as a single entry point for CRUD exection across all entities", "" )
#end##if( ${aib.getParam("crudDeclStrategy") == "methodsPerClass" )
#end##macro( awsLambdaFunctionDecls )

##################################################################################
## awsLambdaFuncDecl
##################################################################################
#macro( awsLambdaFuncDecl $className $funcNameToCall $funcNameToExpose $desc $separatorChar )
#if( ${aib.getParam("terraform.inUse")} == "true" )
#if( ${containerObject} )
#set( $appName = "Container-${containerObject.getName()}" )
#else
#set( $appName = "$aib.getApplicationNameFormatted()" )
#end##if( ${containerObject} )
resource "aws_lambda_function" "${funcNameToExpose}" {
  filename         = "/home/circleci/gitRoot/target/${appName}-${aib.getVersion()}.jar"
  function_name    = "${aib.getParam('aws-lambda.funcNamePrefix')}${funcNameToExpose}"
  role             = "${aib.getParam('aws-lambda.lambdaRoleArn')}"
  handler          = "${aib.getRootPackageName(true)}.#getDelegatePackageName().${className}AWSLambdaDelegate::${funcNameToCall}"
  source_code_hash = "${esc.dollar}{filebase64sha256("/home/circleci/gitRoot/target/${appName}-${aib.getVersion()}.jar")}"
  runtime          = "${aib.getParam('aws-lambda.runtime')}"
  memory_size      = "${aib.getParam('aws-lambda.memorySize')}"
  timeout          = "${aib.getParam('aws-lambda.timeout')}"
  publish          = "${aib.getParam('aws-lambda.publish')}"
#awsLambdaFuncDeclEnvVars()  
  }
  vpc_config {
     subnet_ids = ["${aib.getParam('aws-lambda.vpcSubnetIds')}"]
     security_group_ids = ["${aib.getParam('aws-lambda.vpcSecurityGroupIds')}"]
  }  
}

#else
              {
                "functionName": "${funcNameToExpose}",
                "description": "${desc}",
#if ( ${aib.getParam('aws-lambda.runtime')} == "java8" )                
                "handler": "${aib.getRootPackageName(true)}.#getDelegatePackageName().${className}AWSLambdaDelegate::${funcNameToCall}",
#else
				"handler": "functions_awslambda.${funcNameToCall}",
#end ##if ( ${aib.getParam('aws-lambda.runtime')} == "java8" )                
                "timeout": ${aib.getParam('aws-lambda.timeout')},
                "memorySize": ${aib.getParam('aws-lambda.memorySize')}

              }${separatorChar}
#end##if( ${aib.getParam("terraform.inUse")} == "true" )
#end##macro( awsLambdaFuncDecl $className $funcNameToCall $funcNameToExpose $desc $separatorChar )

##################################################################################
## awsLambdaPluginDecl
##################################################################################
#macro( awsLambdaPluginDecl )
<!-- aws lambda plugin -->
 	  <plugin>
        <groupId>com.github.seanroy</groupId>
        <artifactId>lambda-maven-plugin</artifactId>
        <version>2.3.2</version>
        <configuration>
          <region>${lambda.region}</region>
          <accessKey>${lambda.accessKey}</accessKey>
          <secretKey>${lambda.secretKey}</secretKey>        
          <functionCode>${lambda.functionCode}</functionCode>
          <version>${lambda.version}</version>
          <environmentVpcSecurityGroupsIds>${lambda.vpcSecurityGroupIds}</environmentVpcSecurityGroupsIds>
          <environmentVpcSubnetIds>${lambda.vpcSubnetIds}</environmentVpcSubnetIds>
          <lambdaRoleArn>${lambda.lambdaRoleArn}</lambdaRoleArn>
          <s3Bucket>${lambda.s3Bucket}</s3Bucket>
          <publish>${lambda.publish}</publish>
          <runtime>${lambda.runtime}</runtime>
          <forceUpdate>${lambda.forceUpdate}</forceUpdate>
          <environmentVariables>
            <delegateDAOHost>${lambda.delegateDAOHost}</delegateDAOHost>
            <delegateDAOPort>${lambda.delegateDAOPort}</delegateDAOPort>
            <kinesisStreamName>${lambda.kinesisStreamName}</kinesisStreamName>
		  </environmentVariables>
		  <lambdaFunctionsJSON>
			[
#awsLambdaFunctionDecls()
            ]
          </lambdaFunctionsJSON>
        </configuration>
      </plugin>

#end##macro( awsLambdaPluginDecl )

##################################################################################
## awslambdaProperties
##################################################################################
#macro( awslambdaProperties )
#if ( ${aib.getParam('aws-lambda.runtime')} == "java8" || ${aib.getParam('aws-lambda.runtime')} == "Java")   
	<lambda.functionCode>${project.build.directory}/${project.build.finalName}.jar</lambda.functionCode>     
#else
	<lambda.functionCode>${project.build.directory}/${project.build.finalName}-bin.zip</lambda.functionCode>
#end 	  
      <lambda.version>${project.version}</lambda.version>
<!-- user aws lambda options -->
      <lambda.accessKey>${AWS_ACCESSKEY}</lambda.accessKey>
      <lambda.secretKey>${AWS_SECRETKEY}</lambda.secretKey>
      <lambda.s3Bucket>${aib.getParam('aws-lambda.s3Bucket')}</lambda.s3Bucket>
      <lambda.region>${aib.getParam('aws.region')}</lambda.region>
      <lambda.runtime>${aib.getParam('aws-lambda.runtime')}</lambda.runtime>
      <lambda.timeout>${aib.getParam('aws-lambda.timeout')}</lambda.timeout>
      <lambda.forceUpdate>${aib.getParam('aws-lambda.forceUpdate')}</lambda.forceUpdate>
      <lambda.publish>${aib.getParam('aws-lambda.publish')}</lambda.publish>
      <lambda.lambdaRoleArn>${aib.getParam('aws-lambda.lambdaRoleArn')}</lambda.lambdaRoleArn>
      <lambda.vpcSubnetIds>${aib.getParam('aws-lambda.vpcSubnetIds')}</lambda.vpcSubnetIds>
      <lambda.vpcSecurityGroupIds>${aib.getParam('aws-lambda.vpcSecurityGroupIds')}</lambda.vpcSecurityGroupIds>
      <lambda.delegateDAOHost>${aib.getParam('aws-lambda.delegateDAOHost')}</lambda.delegateDAOHost>
      <lambda.delegateDAOPort>${aib.getParam('aws-lambda.delegateDAOPort')}</lambda.delegateDAOPort>
      <lambda.kinesisStreamName>${aib.getParam('aws-lambda.kinesisStreamName')}</lambda.kinesisStreamName>

#end##macro( awslambdaProperties )

##################################################################################
## swaggerProperties
##################################################################################
#macro( swaggerProperties )
<!-- user swagger options -->      
      <swagger.plugin.version>3.1.6</swagger.plugin.version>
      <swagger.host>${aib.getParam('swagger.host')}</swagger.host>
      <swagger.basepath>${aib.getParam('swagger.basepath')}</swagger.basepath>
	  <swagger.contact.email>${aib.getParam('swagger.contactEmail')}</swagger.contact.email>
      <swagger.contact.name>${aib.getParam('swagger.contactName')}</swagger.contact.name>
      <swagger.contact.url>${aib.getParam('swagger.contactUrl')}</swagger.contact.url>
	  <swagger.license.url>${aib.getParam('swagger.licenseUrl')}</swagger.license.url>
      <swagger.license.name>${aib.getParam('swagger.licenseName')}</swagger.license.name>
	  <swagger.title>${aib.getParam('swagger.title')}</swagger.title>
      <swagger.version>${aib.getParam('swagger.version')}</swagger.version>
      <swagger.description>${aib.getParam('swagger.description')}</swagger.description>
      <swagger.termsofservice>${aib.getParam('swagger.termsOfService')}</swagger.termsofservice>
      <swagger.outputformat>${aib.getParam('swagger.outputFormats')}</swagger.outputformat>
#end##macro( swaggerProperties )

##################################################################################
## awsLambdaDependencies
##################################################################################
        
#macro( awsLambdaDependencies )
<!-- AWS Lambda Java Core -->
	    <dependency>
	      <groupId>com.amazonaws</groupId>
	      <artifactId>aws-lambda-java-core</artifactId>
	      <version>1.2.0</version>
	    </dependency>
#if ( ${aib.getParam('aws-lambda.use kinesis')} == "true" )	    
		<dependency>
  			<groupId>software.amazon.kinesis</groupId>
  			<artifactId>amazon-kinesis-client</artifactId>
  			<version>2.0.0</version>
		</dependency>
#end##if ( ${aib.getParam('aws-lambda.use kinesis')} == "true" )		
#end##macro( awsLambdaDependencies )

