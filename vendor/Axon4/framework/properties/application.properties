spring.liquibase.enabled=false

#set( $entity-store-type = $aib.getParam( "spring.entity-store-type") )
#set( $event-store-type = $aib.getParam( "axon-framework.event-store-type") )
#outputCommonApplicationProperties()

# Management endpoints inclusion
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=*

axon.axonserver.enabled=${aib.getParam("axon-framework.use-axon-server")}
axon.axonserver.servers=${aib.getParam("axon-framework.axonserver-servers")}

#snap shot thresholds are applied per class using the default value
#foreach( $aggregate in $aib.getClassesToGenerate() )
#set( $aggregateName = ${Utils.lowercaseFirstLetter( ${aggregate.getName()} )} )
#set( $aggregateSnapshotThreshold = $aib.getParam("axon-framework.default-snapshot-threshold" ) )
axon.aggregate.${aggregateName}.snapshot-threshold=${aggregateSnapshotThreshold}
#end##foreach( $aggregate = $aib.getClassesToGenerate() )

#snap shot thresholds are applied per aggregate using the custom defined value
#foreach( $aggregate in $aib.getAggregatesToGenerate() )
#set( $aggregateName = $aggregate.getName() )
#set( $aggregateThreshold = $aggregate.getSnapshotThreshold() )
axon.aggregate.${aggregateName}.snapshot-threshold=${aggregateSnapshotThreshold}
#end##foreach( $aggregate = $aib.getAggregatesToGenerate() )

# this configuration is recommended by AxonIQ, assign to message then general and events will use that value
#axon.serializer.messages=xstream
#axon.serializer.general=java
axon.serializer.events=jackson

# mongodb parameters
#if ( ${entity-store-type} == "mongodb" || ${aib.getParam("axon-framework.event-store-type")} == "mongodb" )
mongodb.connection.url=${aib.getParam("axon-framework.entity-store-url")}
spring.data.mongodb.uuid-representation=standard
#end##if ( ${entity-store-type} == "mongodb" || ${aib.getParam("axon-framework.event-store-type")} == "mongodb" )

#if ( ${aib.getParam("axon-framework.event-store-type")} == "mongodb" )
mongodb.sagas.collection.name=${aib.getParam("axon-framework.sagas-collection-name")}
mongodb.snapshot.events.collection.name=${aib.getParam("axon-framework.snapshot-events-collection-name")}
mongodb.domain.events.collection.name=${aib.getParam("axon-framework.domain-events-collection-name")}
#end##if ( ${aib.getParam("axon-framework.event-store-type")} == "mongodb" )


#if ( $aib.getParam( "axon-framework.enableDiscoveryClient" ) == true )
# enable distributed axon commands
axon.distributed.enabled=true
# whether to fall back to http when no meta-data is available
axon.distributed.spring-cloud.fallback-to-http-get=true
# the URL on which to publish local data and retrieve from other nodes.
axon.distributed.spring-cloud.fallback-url=/message-routing-information
eureka.client.healthcheck.enabled=true
#end##if ( $aib.getParam( "axon-framework.enableDiscoveryClient" ) == true )
