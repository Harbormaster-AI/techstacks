#------------------------------------------------------------------------------
# Harbormaster
# 2021 Harbormaster, Inc.
# All Rights Reserved.
# 
# This file is subject to the terms and conditions defined in
# file 'license.txt', which is part of this source code package.
#  
# Contributors :
#       Harbormaster Dev Team - General Release
#-------------------------------------------------------------------------------

#------------------------------------------------------------------------------
## root level common mappings
#------------------------------------------------------------------------------
ssh.key=
gitpush.sh=
.gitignore=
settings.xml=
Dockerfile=
docker-compose.yml
entrypoint.sh
README.md=

#------------------------------------------------------------------------------
## pom file for gradle invocation from the platform
#------------------------------------------------------------------------------
pom-gradle.xml=.|pom.xml


#------------------------------------------------------------------------------
## CI/CD Platforms
#------------------------------------------------------------------------------
#determineCICDPlatformFiles()

#------------------------------------------------------------------------------
## application 
#------------------------------------------------------------------------------
Application.java=.cqrs.src.main.java.$packageName

#------------------------------------------------------------------------------
## kotlin
#------------------------------------------------------------------------------
commands.kt=.cqrs.src.main.kotlin.$packageName.api
entities.kt=.cqrs.src.main.kotlin.$packageName.entity
events.kt=.cqrs.src.main.kotlin.$packageName.api
queries.kt=.cqrs.src.main.kotlin.$packageName.query
#if ( $aib.getEnumClassesToGenerate().size() > 0 )
enums.kt=.cqrs.src.main.kotlin.$packageName.enum
#end##if ( $aib.getEnumClassesToGenerate().size() > 0 )
#if ( $aib.getValueObjectsToGenerate().size() > 0 )
valueobjects.kt=.cqrs.src.main.kotlin.$packageName.valueobject
#end##if ( $aib.getValueObjectsToGenerate().size() > 0 )
events.kt=.cqrs.src.main.kotlin.$packageName.api

#------------------------------------------------------------------------------
## aggregate
#------------------------------------------------------------------------------
__classes__Aggregate.java=.cqrs.src.main.java.$packageName.aggregate

#------------------------------------------------------------------------------
## config
#------------------------------------------------------------------------------
AxonConfig.java=.cqrs.src.main.java.$packageName.config
SnapshotConfig.java=.cqrs.src.main.java.$packageName.config
#if( $aib.getParam( "axon-framework.event-store-type") == "mongodb" || $aib.getParam( "axon-framework.entity-store-type") == "mongodb" )
MongoDBConfig.java=.cqrs.src.main.java.$packageName.config
#end##if( $aib.getParam( "axon-framework.event-store-type") == "mongodb" || $aib.getParam( "axon-framework.entity-store-type") == "mongodb" )
#if( $aib.getParam( "axon-framework.event-store-type").contains("jpa") )
JPAConfig.java=.cqrs.src.main.java.$packageName.config
#end##if( $aib.getParam( "axon-framework.event-store-type").contains("jpa") )
#if ( $aib.getParam( "axon-framework.enableDiscoveryClient" ) == true )
CommandRouterConfig.java=.cqrs.src.main.java.$packageName.config
#end##if ( $aib.getParam( "axon-framework.enableDiscoveryClient" ) == true )

#------------------------------------------------------------------------------
## rest controller
#------------------------------------------------------------------------------
*QueryRestController.java=.cqrs.src.main.java.$packageName.controller.query
*CommandRestController.java=.cqrs.src.main.java.$packageName.controller.command
Corda*Controller.java=.cqrs.src.main.java.$packageName.controller
Base*SpringRestController.java=.cqrs.src.main.java.$packageName.controller

#------------------------------------------------------------------------------
## delegate
#------------------------------------------------------------------------------
*Delegate.java=.cqrs.src.main.java.$packageName.delegate

#------------------------------------------------------------------------------
## properties
#------------------------------------------------------------------------------
application.properties=.cqrs.src.main.resources
axonserver.properties=.cqrs.src.main.resources

#------------------------------------------------------------------------------
## query and entity handling via projection
#------------------------------------------------------------------------------
__classes__Projector.java=.cqrs.src.main.java.$packageName.projector
__classes__EntityProjector.java=.cqrs.src.main.java.$packageName.projector

#------------------------------------------------------------------------------
## validator
#------------------------------------------------------------------------------
__classes__Validator.java=.cqrs.src.main.java.$packageName.validator

#------------------------------------------------------------------------------
## repository
#------------------------------------------------------------------------------
__classes__Repository.java=.cqrs.src.main.java.$packageName.repository

#------------------------------------------------------------------------------
## subscriber
#------------------------------------------------------------------------------
*Subscriber.java=.cqrs.src.main.java.$packageName.subscriber

#if ( $aib.getParam("axon-framework.event-store-type").contains("jpa") )
#------------------------------------------------------------------------------
## persistence.xml
#------------------------------------------------------------------------------
persistence.xml=.cqrs.src.main.resources.META-INF

#------------------------------------------------------------------------------
## providers
#------------------------------------------------------------------------------
*Provider.java=.cqrs.src.main.java.$packageName.provider
#end##if ( $aib.getParam("axon-framework.event-store-type").contains("jpa") )

#------------------------------------------------------------------------------
## docker
#------------------------------------------------------------------------------
Dockerfile=.

#------------------------------------------------------------------------------
## kubernetes
#------------------------------------------------------------------------------
axonserver.yaml=deploy.kubernetes

#------------------------------------------------------------------------------
## Exceptions
#------------------------------------------------------------------------------
*Exception.java=.cqrs.src.main.java.$packageName.exception

#------------------------------------------------------------------------------
## Junit test 
#------------------------------------------------------------------------------
BaseTest.java=.cqrs.src.main.java.$packageName.test
__classes__Test.java=.cqrs.src.main.java.$packageName.test


#if ( $aib.getParam( "axon-framework.generateEurekaDiscoveryServer" ) == true )
#------------------------------------------------------------------------------
## Junit test 
#------------------------------------------------------------------------------
eureka-server-pom.xml=.cqrs.src.eurekaserver
ServiceRegistrationAndDiscoveryServiceApplication.java=.cqrs.src.eurekaserver.src.main.java.$packageName
application-eureka-server.properties=.cqrs.src.eurekaserver.src.main.resources
#end##if ( $aib.getParam( "axon-framework.generateEurekaDiscoveryServer" ) == true )

#------------------------------------------------------------------------------
## Corda Mappings
#------------------------------------------------------------------------------
#set( $tokenSystemName = ${aib.getParam( "corda.token-system-name" ).toLowerCase()} )

## controllers
CordaTokenCommandRestController=cqrs.src.main.java.$packageName.controller.command
__classes__TokenCommandRestController=cqrs.src.main.java.$packageName.controller.command

## workflows
DriverBasedTest.kt=.workflows.src.integrationTest.kotlin.${tokenSystemName}market
Create__classes__Token.kt=.workflows.src.main.kotlin.$packageName.${tokenSystemName}market.flows
IssueNew${corda.token-system-name}.kt=.workflows.src.main.kotlin.$packageName.${tokenSystemName}market.flows
TotalPart.kt=.workflows.src.main.kotlin.$packageName.${tokenSystemName}market.flows
Transfer${corda.token-system-name}Token.kt=.workflows.src.main.kotlin.$packageName.${tokenSystemName}market.flows
TransferPartToken.kt=.workflows.src.main.kotlin.$packageName.${tokenSystemName}market.flows
#FlowTests.kt=.workflows.src.main.kotlin.$packageName.${tokenSystemName}market

## contracts
__classes__Contract.kt=.contracts.src.main.kotlin.$packageName.${tokenSystemName}market.contracts
__classes__TokenState.kt=.contracts.src.main.kotlin.$packageName.${tokenSystemName}market.states
#ContractTests.kt=.contracts.src.main.kotlin.$packageName.${tokenSystemName}market.contracts
#StateTests.kt=.contracts.src.main.kotlin.$packageName.${tokenSystemName}market.contracts

## helpers
CordaHelper.java=.cqrs.src.main.java.$packageName.helper.corda
HolderEnum.kt=.cqrs.src.main.kotlin.$packageName.helper.corda.api

gradle.properties=.
gradlew*=.
repositories.gradle=.
settings.gradle=.
constants.properties=.
TRADEMARK*=.
README*=.

gradle-wrapper*=.gradle.wrapper

## exclusions, includes this file
exclusions=mappings.properties,options.xml,settings.xml

## directories and files not to process mapping wise, but instead use the directory found in to locate in the destination
## if applying a directory structure, be sure to use \\ and not \ and be sure to put it in the beginning AND the end
## do not do this gradefiles
## do not do this foo_dir\foo_subdir
## DO THIS \\foo_dir\\foo_subdir\\
map.directly.from.source=log4j2.xml,build.gradle,\\diagram\\